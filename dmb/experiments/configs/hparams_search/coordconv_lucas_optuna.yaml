# @package _global_

# example hyperparameter optimization of some experiment with Optuna:
# python train.py -m hparams_search=mnist_optuna experiment=example

defaults:
  - override /hydra/sweeper: optuna
  # - override /hydra/launcher: ray

# choose metric which will be optimized by Optuna
# make sure this is the correct name of some metric logged in lightning module!
optimized_metric: "val/loss"

# here we define Optuna hyperparameter search
# it optimizes for value returned from function with @hydra.main decorator
# docs: https://hydra.cc/docs/next/plugins/optuna_sweeper
hydra:
  mode: "MULTIRUN" # set hydra to multirun by default if this config is attached

  # launcher:
  #   ray:
  #     init:
  #       num_gpus: 2
  #       local_mode: False
  #     remote:
  #       num_gpus: 1
  #       max_calls: 1

  sweeper:
    _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper

    # storage URL to persist optimization results
    # for example, you can use SQLite if you set 'sqlite:///example.db'
    storage: null

    # name of the study to persist optimization results
    study_name: coordconv_speclib2d_optuna

    # number of parallel workers
    n_jobs: 1

    # 'minimize' or 'maximize' the objective
    direction: minimize

    # total number of runs that will be executed
    n_trials: 30

    # choose Optuna hyperparameter sampler
    # you can choose bayesian sampler (tpe), random search (without optimization), grid sampler, and others
    # docs: https://optuna.readthedocs.io/en/stable/reference/samplers.html
    sampler:
      _target_: optuna.samplers.TPESampler
      seed: 1234
      n_startup_trials: 10 # number of random sampling runs before optimization starts

    # define hyperparameter search space
    params:
      model.optimizer.lr: interval(0.0001, 0.01)
      datamodule.batch_size: choice(256,512)
      model.decoder.num_hidden_neurons: choice([100,75,50],[150,75,25],[200,150,100],[128,64])
      model.encoder.coordconv_first: choice(True,False)
      model.encoder.n_hidden_channels: choice([16, 32, 32, 64],[8, 16, 16, 32])
      model.encoder.output_channels: choice(5,8,12)
      model.decoder.dropout: choice(0.0,0.1,0.2,0.3)
