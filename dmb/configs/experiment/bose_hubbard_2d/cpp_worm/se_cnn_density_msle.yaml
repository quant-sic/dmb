# @package _global_

# Test the Lucas dataset with all columns

defaults:
  - override /datamodule: bose_hubbard_2d
  - override /model: dmb_lit_model
  - override /model/model: dmb_model
  - override /callbacks: default
  - override /trainer: default
  - _self_

tags: ["test", "bose_hubbard_2d", "resnet"]

seed: 12345

trainer:
  max_epochs: 10000
  gradient_clip_val: 1
  accumulate_grad_batches: 8

exp_name: "bose_hubbard_2d/cpp_worm/se_cnn/density/msle"

test: True

datamodule:

  batch_size: 1024

  clean: True
  observables: [
    "Density_Distribution"
    ]

  base_transforms: null
    # _target_: torchvision.transforms.transforms.Compose
    # transforms: [
    #   {
    #     _target_: dmb.data.utils.TupleWrapper,
    #     transform: 
    #       {_target_: torchvision.transforms.Normalize,
    #       mean: [14.1732,  0.5000, 12.3417,  3.7936],
    #       std: [23.4323,  0.5000, 12.3242,  3.8556]}
    #   }
    # ]

  train_transforms: 
      _target_: torchvision.transforms.transforms.Compose
      transforms: [
                  _target_: dmb.data.utils.SquareSymmetryGroupAugmentations,
                  # {_target_: dmb.data.utils.TupleWrapper,
                  #   transform: 
                  #     {
                  #       _target_: torchvision.transforms.RandomErasing
                  #     }
                    
                  # }
                  ]


model:
  model:

    in_channels: 4
    out_channels: 1

    module_list: [
      {
        _target_: dmb.model.models.simple_resnet2d.SeResNet2d,
        in_channels: 4,
        out_channels: 1,
        kernel_sizes: [5,3,3,3,3,3,3,3],
        n_channels: [16,32,64,128,128,256,256,256],
        dropout: 0.1
      },
    ]

    output_modification: [
        _target_: dmb.model.dmb_model.Exponential
    ]

  optimizer:
    lr: 0.001

  scheduler:
    _target_: torch.optim.lr_scheduler.ReduceLROnPlateau
    mode: min
    factor: 0.5
    patience: 200
    min_lr: 1e-5
    verbose: False
    cooldown: 100
    threshold: 0.1

  loss:
    _target_: dmb.model.utils.MSLELoss
    reduction: "mean"