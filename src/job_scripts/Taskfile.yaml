version: "3"

env:
  REPO_ROOT:
    sh: git rev-parse --show-toplevel

  DATA_DIR_ROOT: "{{ .REPO_ROOT }}/data"
  VIRTUAL_ENV: "{{ .REPO_ROOT }}/.venv"

vars:
  JOB_SCRIPTS_DIR: "{{.REPO_ROOT}}/src/job_scripts"
  TEMPLATES_DIR: "{{.JOB_SCRIPTS_DIR}}/templates"

  STANDARD_CPU_JOB_TEMPLATE: "standard_cpu_job_template.sh.jinja2"
  GPU_JOB_TEMPLATE: "gpu_job_template.sh.jinja2"
  QMC_JOBS_STARTER_TEMPLATE: "qmc_jobs_starter_template.sh.jinja2"

  PIPE_OUT_ROOT: "{{.REPO_ROOT}}/pipe_out"

dotenv: ["{{ .REPO_ROOT }}/.env"]

tasks:
  setup:
    desc: Setup
    cmds:
      - mkdir -p {{ .PIPE_OUT_ROOT }}

  load_dataset:
    desc: Load a dataset
    deps:
      - setup
    vars:
      JOB_NAME: load_dataset

      _COMMAND: 'uv run python {{ .REPO_ROOT }}/src/dmb/data/bose_hubbard_2d/worm/scripts/load_dataset.py {{ .REPO_ROOT }}/data/{{ .DATA_DIR }}/simulations {{ .REPO_ROOT }}/data/{{ .DATA_DIR }}/dataset {{ .INCLUDE_TUNE_DIRS | default "" }}'

    cmds:
      - uv run jinja2 {{.TEMPLATES_DIR}}/{{ .STANDARD_CPU_JOB_TEMPLATE }} -D job_name={{ .JOB_NAME }} -D command='{{ ._COMMAND }}' -D venv_path='{{ .VIRTUAL_ENV }}' -D pipe_out_root='{{ .PIPE_OUT_ROOT }}' -D working_dir='{{ .REPO_ROOT }}' -D slurm_partition={{ .SLURM_DISPATCHER_PARTITION }} | sbatch

  load_dataset_box:
    desc: Load the box dataset
    cmds:
      - task: load_dataset
        vars:
          DATA_DIR: "bose_hubbard_2d/box/1.0/0.1/41"
          INCLUDE_TUNE_DIRS: "--include-tune-dirs"

  load_dataset_wedding_cake:
    desc: Load the wedding cake dataset
    cmds:
      - task: load_dataset
        vars:
          DATA_DIR: "bose_hubbard_2d/wedding_cake/1.0/0.1/40/-2.0"

  load_dataset_mu_cut:
    desc: Load the mu cut dataset
    cmds:
      - task: load_dataset
        vars:
          DATA_DIR: "bose_hubbard_2d/mu_cut/1.0/0.1/16"

      - task: load_dataset
        vars:
          DATA_DIR: "bose_hubbard_2d/mu_cut/1.0/0.25/16"

  load_dataset_random:
    desc: Load the random dataset
    cmds:
      - task: load_dataset
        vars:
          DATA_DIR: "bose_hubbard_2d/random"
          INCLUDE_TUNE_DIRS: "--include-tune-dirs"

  run_qmc:
    desc: Run QMC
    deps:
      - setup

    vars:

      SLURM_ARRAY_SIZE: "{{ .SLURM_ARRAY_SIZE | default 1 }}"
      QMC_TASK_ARGS: '{{ .QMC_TASK_ARGS | default "" }}'
      QMC_TASK_OPTIONS: '{{ .QMC_TASK_OPTIONS | default "" }}'

      _COMMAND:
        sh: echo "uv run python {{ .REPO_ROOT }}/src/dmb/scripts/data/bose_hubbard_2d/worm/{{ .QMC_SCRIPT_FILE }} {{ .QMC_TASK_ARGS }} {{ .QMC_TASK_OPTIONS }}

    cmds:
      - uv run jinja2 {{.TEMPLATES_DIR}}/{{ .QMC_JOBS_STARTER_TEMPLATE }} -D qmc_task={{ .QMC_TASK }} -D command='{{ ._COMMAND }}' -D venv_path='{{ .VIRTUAL_ENV }}' -D slurm_array_size={{ .SLURM_ARRAY_SIZE }} -D pipe_out_root='{{ .PIPE_OUT_ROOT }}' -D working_dir='{{ .REPO_ROOT }}' -D slurm_partition={{ .SLURM_DISPATCHER_PARTITION }} -D worm_mpi_executable='{{ .WORM_MPI_EXECUTABLE }}' | sbatch

  run_qmc_random:
    desc: Run QMC on random potentials
    vars:
      NUMBER_OF_SAMPLES: 2500
      NUMBER_OF_CONCURRENT_JOBS: 50
      SLURM_ARRAY_SIZE: 1
      MAX_DENSITY_ERROR: 0.015
    cmds:
      - task: run_qmc
        vars:
          QMC_TASK: random
          QMC_SCRIPT_FILE: random_potential.py
          QMC_TASK_OPTIONS: "--potential-type random --number-of-samples {{ .NUMBER_OF_SAMPLES }} --number-of-concurrent-jobs {{ .NUMBER_OF_CONCURRENT_JOBS }} --max-density-error {{ .MAX_DENSITY_ERROR }}"
          #--U_on_max 0.4 --V_nn_z_min 0.85 --V_nn_z_max 1.15 --mu_offset_min 1.5
          SLURM_ARRAY_SIZE: "{{ .SLURM_ARRAY_SIZE }}"

  run_qmc_box:
    desc: Run QMC on the box potential
    vars:
      NUMBER_OF_CONCURRENT_JOBS: 5
      MAX_DENSITY_ERROR: 0.03
    cmds:
      - task: run_qmc
        vars:
          QMC_TASK: box
          QMC_SCRIPT_FILE: box.py
          QMC_TASK_OPTIONS: "--tau-max-threshold 25 --max-density-error {{ .MAX_DENSITY_ERROR }} --number-of-concurrent-jobs {{ .NUMBER_OF_CONCURRENT_JOBS }}"

  run_qmc_wedding_cake:
    desc: Run QMC on the wedding cake potential
    vars:
      NUMBER_OF_CONCURRENT_JOBS: 10
    cmds:
      - task: run_qmc
        vars:
          QMC_TASK: wedding_cake
          QMC_SCRIPT_FILE: wedding_cake.py
          QMC_TASK_OPTIONS: "--number-of-concurrent-jobs {{ .NUMBER_OF_CONCURRENT_JOBS }}"

  run_qmc_mu_cut:
    desc: Run QMC on the mu cut potential
    vars:
      NUMBER_OF_CONCURRENT_JOBS: 25
    cmds:
      - task: run_qmc
        vars:
          QMC_TASK: mu_cut
          QMC_SCRIPT_FILE: mu_cut.py
          QMC_TASK_OPTIONS: "--L 16 --muU-num-steps 50 --muU-min 0.0 --muU-max 3.0 --zVU 1.0 --ztU 0.25 --number-of-concurrent-jobs {{ .NUMBER_OF_CONCURRENT_JOBS }}"

      - task: run_qmc
        vars:
          QMC_TASK: mu_cut
          QMC_TASK_OPTIONS: mu_cut.py
          QMC_TASK_ARGS: "--L 16 --muU-num-steps 50 --muU-min 0.0 --muU-max 3.0 --zVU 1.0 --ztU 0.1 --number-of-concurrent-jobs {{ .NUMBER_OF_CONCURRENT_JOBS }}"

  run_qmc_from_potential:
    desc: Run QMC from a potential
    vars:
      NUMBER_OF_CONCURRENT_JOBS: 1
      POTENTIAL_FILE_PATH: "{{ .POTENTIAL_FILE_PATH }}"
      MAX_DENSITY_ERROR: 0.03
      SLURM_ARRAY_SIZE: 1
    
    cmds:
      - task: run_qmc
        vars:
          QMC_TASK: from_potential
          QMC_SCRIPT_FILE: from_potential.py
          QMC_TASK_ARGS: "{{ .POTENTIAL_FILE_PATH }} minerva_test"
          QMC_TASK_OPTIONS: "--number-of-concurrent-jobs {{ .NUMBER_OF_CONCURRENT_JOBS }} --max-density-error {{ .MAX_DENSITY_ERROR }}"
          SLURM_ARRAY_SIZE: "{{ .SLURM_ARRAY_SIZE }}"

  create_split:
    desc: Create a split
    deps:
      - setup
    vars:
      JOB_NAME: create_split

      _COMMAND: "uv run python {{ .REPO_ROOT }}/src/dmb/scripts/train/create_split.py experiment={{ .EXPERIMENT }} file_path={{ .FILE_PATH }} split.dataset.dataset_dir_path={{ .DATASET_DIR_PATH }}"

    cmds:
      - uv run jinja2 {{.TEMPLATES_DIR}}/{{ .STANDARD_CPU_JOB_TEMPLATE }} -D job_name={{ .JOB_NAME }} -D command='{{ ._COMMAND }}' -D venv_path='{{ .VIRTUAL_ENV }}' -D pipe_out_root='{{ .PIPE_OUT_ROOT }}' -D working_dir='{{ .REPO_ROOT }}' -D slurm_partition={{ .SLURM_DISPATCHER_PARTITION }} | sbatch

  create_split_random:
    desc: Create a split for the random dataset
    vars:
      SPLIT_NAME_FROM_TIME:
        sh: date +'%Y-%m-%d_%H-%M-%S'
      SPLIT_NAME: "{{ .SPLIT_NAME | default .SPLIT_NAME_FROM_TIME }}"
      DATASET_DIR_PATH: "{{ .DATA_DIR_ROOT }}/bose_hubbard_2d/random/dataset"

      EXPERIMENT: '{{ .EXPERIMENT | default "create_split/bose_hubbard_2d/random" }}'

    cmds:
      - task: create_split
        vars:
          FILE_PATH: "{{ .DATASET_DIR_PATH }}/splits/{{ .SPLIT_NAME }}.json"
          DATASET_DIR_PATH: "{{ .DATASET_DIR_PATH }}"
          EXPERIMENT: "{{ .EXPERIMENT }}"

  train:
    desc: Train a model
    deps:
      - setup
    vars:
      JOB_NAME: train
      EXPERIMENT: '{{ .EXPERIMENT | default "train/bose_hubbard_2d/worm/se_resnet_mse_softplus" }}'

      DATASET_DIR_PATH: "{{ .DATA_DIR_ROOT }}/bose_hubbard_2d/random/dataset"

      SPLIT_FILE: '{{ .SPLIT_FILE | default "v2.json" }}'
      SPLIT_FILE_PATH: "{{ .DATASET_DIR_PATH }}/splits/{{ .SPLIT_FILE }}"

      _COMMAND: "uv run python {{ .REPO_ROOT }}/src/dmb/scripts/train/train.py experiment={{ .EXPERIMENT }} datamodule.split.file_path={{ .SPLIT_FILE_PATH }} datamodule.dataset.dataset_dir_path={{ .DATASET_DIR_PATH }}"

    cmds:
      - uv run jinja2 {{.TEMPLATES_DIR}}/{{ .GPU_JOB_TEMPLATE }} -D job_name={{ .JOB_NAME }} -D command='{{ ._COMMAND }}' -D venv_path='{{ .VIRTUAL_ENV }}' -D pipe_out_root='{{ .PIPE_OUT_ROOT }}' -D working_dir='{{ .REPO_ROOT }}' -D slurm_partition=gpu -D num_gpus=1 | sbatch

  invert:
    desc: Invert a density
    deps:
      - setup
    vars:
      JOB_NAME: invert

      _COMMAND: "uv run python {{ .REPO_ROOT }}/src/dmb/scripts/invert/invert.py experiment=minerva"

    cmds:
      - uv run jinja2 {{.TEMPLATES_DIR}}/{{ .GPU_JOB_TEMPLATE }} -D job_name={{ .JOB_NAME }} -D command='{{ ._COMMAND }}' -D venv_path='{{ .VIRTUAL_ENV }}' -D pipe_out_root='{{ .PIPE_OUT_ROOT }}' -D working_dir='{{ .REPO_ROOT }}' -D slurm_partition=gpu -D num_gpus=1 | sbatch