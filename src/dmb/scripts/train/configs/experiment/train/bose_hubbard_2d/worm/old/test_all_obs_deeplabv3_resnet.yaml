# @package _global_

# Test the Lucas dataset with all columns

defaults:
  - override /datamodule: bose_hubbard_2d
  - override /model: dmb_lit_model
  - override /model/model: deep_lab_v3
  - override /callbacks: default
  - override /trainer: default
  - _self_

tags: ["test", "bose_hubbard_2d", "resnet"]

seed: 12345

trainer:
  max_epochs: 10000
  gradient_clip_val: 1
  accumulate_grad_batches: 4
  deterministic: False

exp_name: "setup_test/bose_hubbard_2d/resnet/all_obs"

test: True

datamodule:

  batch_size: 1024

  clean: True
  observables: [
    "Density_Distribution","DensDens_CorrFun","DensDens_CorrFun_local_0","DensDens_CorrFun_local_1","DensDens_CorrFun_local_2","DensDens_CorrFun_local_3","DensDens_Diff_0","DensDens_Diff_1","DensDens_Diff_2","DensDens_Diff_3","DensDens_Diff_Diag_0","DensDens_Diff_Diag_1","DensDens_Diff_Diag_2","DensDens_Diff_Diag_3","DensDens_CorrFun_local_2_step_0","DensDens_CorrFun_local_2_step_1","DensDens_CorrFun_local_2_step_2","DensDens_CorrFun_local_2_step_3","DensDens_CorrFun_local_diag_0","DensDens_CorrFun_local_diag_1","DensDens_CorrFun_local_diag_2","DensDens_CorrFun_local_diag_3","DensDens_CorrFun_sq_0","DensDens_CorrFun_sq_1","DensDens_CorrFun_sq_2","DensDens_CorrFun_sq_3","DensDens_CorrFun_sq_0_","DensDens_CorrFun_sq_1_","DensDens_CorrFun_sq_2_","DensDens_CorrFun_sq_3_","DensDens_CorrFun_sq_diag_0","DensDens_CorrFun_sq_diag_1","DensDens_CorrFun_sq_diag_2","DensDens_CorrFun_sq_diag_3","DensDens_CorrFun_sq_diag_0_","DensDens_CorrFun_sq_diag_1_","DensDens_CorrFun_sq_diag_2_","DensDens_CorrFun_sq_diag_3_","DensDens_CorrFun_sq_0","Density_Distribution_squared"]

  base_transforms:
    _target_: torchvision.transforms.transforms.Compose
    transforms: [
      {
        _target_: torchvision.transforms.Normalize,
        mean: [13.9877,  0.5000, 12.4702,  3.8371],
        std: [22.5992,  0.5000, 12.4117,  3.9227]
      }
    ]

  train_transforms: 
      _target_: torchvision.transforms.transforms.Compose
      transforms: [
                  _target_: dmb.data.utils.D4GroupTransform
                  _target_: torchvision.transforms.RandomErasing
                  ]


model:
  model:
    out_channels: 1
    in_channels: 4
    backbone: resnet18


  optimizer:
    lr: 0.00005

  scheduler:
    _target_: torch.optim.lr_scheduler.ReduceLROnPlateau
    mode: min
    factor: 0.5
    patience: 200
    min_lr: 1e-5
    verbose: False
    cooldown: 200
    threshold: 0.1
