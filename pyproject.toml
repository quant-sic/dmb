[project]
name = "dmb"
dynamic = ["version"]
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    "attrs>=24.2.0",
    "fyeldgenerator>=0.1.7",
    "h5py>=3.12.1",
    "hydra-core>=1.3.2",
    "jinja2-cli>=0.8.2",
    "joblib>=1.4.2",
    "lightning>=2.4.0",
    "matplotlib>=3.9.2",
    "numpy>=2.1.2",
    "pydantic-settings>=2.5.2",
    "python-dotenv>=1.0.1",
    "pyyaml>=6.0.2",
    "scipy>=1.14.1",
    "syjson>=2.1.6",
    "torch>=2.4.1",
    "torchvision>=0.20.1",
    "tqdm>=4.66.5",
    "typer>=0.13.0",
    "wandb>=0.18.3",
]

[build-system]
requires = ["setuptools", "setuptools-scm"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["src"]
include = ["dmb","auto_correlation"]

[project.optional-dependencies]
dev = [
    "ipykernel>=6.29.5",
    "debugpy>=1.8.7",
    "appnope>=0.1.4",
]
ci = [
    "isort>=5.13.2",
    "mypy>=1.12.0",
    "pylint>=3.3.1",
    "pytest>=8.3.3",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=5.0.0",
    "pytest-dotenv>=0.5.2",
    "pytest-mock>=3.14.0",
    "ruff>=0.6.9",
    "types-pyyaml>=6.0.12.20240917",
    "yapf>=0.40.2",
    "pytest-cases>=3.8.6",
]


[tool.uv.sources]
fyeldgenerator = { git = "https://github.com/cphyc/FyeldGenerator.git" }


[tool.pytest.ini_options]
pytest_load_dotenv = true
env_files = ".env"
testpaths = "src/tests"
python_files = "test_*.py"
markers = ["unit", "integration","requires_worm"]
cache_dir = ".cache/pytest"
asyncio_default_fixture_loop_scope = "function"
addopts = [
  "-ra",
  "--cov-report=term-missing",
  "--cov=src/dmb"
]

[tool.mypy]
exclude = ["^src/dmb/model/models"]
show_error_codes = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
ignore_missing_imports = true
no_implicit_optional = true
warn_unused_ignores = true
warn_return_any = true
warn_unreachable = true

[tool.pylint.BASIC]
good-names = [
  "logger",
  "pytestmark"
]
argument-rgx = "([a-z_][a-z0-9_]{0,40}$|[JL(ztU)(muU)(zVU)(Ntest)(Nmeasure)(Nmeasure2)(Nsave)(E_off)(C_worm)_]+[a-z0-9_]{0,40})"
variable-rgx = "([a-z_][a-z0-9_]{0,40}$|[JL(ztU)(muU)(zVU)(Ntest)(Nmeasure)(Nmeasure2)(Nsave)(E_off)(C_worm)_]+[a-z0-9_]{0,40})"
attr-rgx = "([a-z_][a-z0-9_]{0,40}$|[JL(ztU)(muU)(zVU)(Ntest)(Nmeasure)(Nmeasure2)(Nsave)(E_off)(C_worm)_]+[a-z0-9_]{0,40})"

[tool.pylint.FORMAT]
max-line-length = 88

[tool.pylint.DESIGN]
max-args = 15
max-attributes = 15
max-locals = 30

[tool.pylint."MESSAGES CONTROL"]
disable = [
  "too-few-public-methods",
  "too-many-lines",
  "W1203",
  "R0801",
  "W0221", # torchmetrics and lightning are intended to violate this rule
  "too-many-positional-arguments",
  "too-many-arguments",
  "abstract-class-instantiated", # pylint does not play well with attrs define
  "consider-using-f-string",
]

[tool.yapf]
based_on_style = "pep8"
column_limit = 88

[tool.isort]
known_first_party = ["dmb"]
multi_line_output = 2

