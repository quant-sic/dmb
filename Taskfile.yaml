version: "3"

vars:
  CUDA_VERSION_DEFAULT: cu124
  CUDA_VERSION: "{{ .CUDA_VERSION | default .CUDA_VERSION_DEFAULT }}"
  PLATFORM:
    sh: uname -s | tr '[:upper:]' '[:lower:]'

  PYTHON_CODE_DIRS: "src/dmb src/tests"

  REPO_ROOT:
    sh: git rev-parse --show-toplevel

tasks:
  install-uv:
    desc: "Install uv."
    run: once
    # silent: true
    vars:
      UV_INSTALLED:
        sh: |
          if [ -x "$(command -v uv)" ]; then
            echo "true"
          else
            echo "false"
          fi
    cmds:
      - |
        if [ "{{.UV_INSTALLED}}" == "false" ]; then
          # for linux and mac
          if [ "{{.PLATFORM}}" == "linux" ] || [ "{{.PLATFORM}}" == "darwin" ]; then
            curl -LsSf https://astral.sh/uv/install.sh | sh
          else
            echo "Unsupported platform"
          fi
        fi

  env-setup:
    desc: "Setup the environment."
    silent: true
    run: once
    deps:
      - task: install-uv
    sources:
      - pyproject.toml
      - .python-version
    generates:
      - ./.venv/**/*
    cmds:
      - uv venv

  build-requirements:
    desc: "Build requirements"
    deps:
      - task: env-setup
    sources:
      - pyproject.toml
      - .python-version
      - cereals.py
    generates:
      - requirements/{{ .PLATFORM }}-{{ .CUDA_VERSION }}/*.lock
    cmds:
      - uv sync --extra setup
      - uv run python cereals.py lock --cereal-name {{ .PLATFORM }}-{{ .CUDA_VERSION }}

  install-dependencies:
    desc: "Install dependencies"
    deps:
      - task: env-setup
    vars:
      LOCKFILE_VERSION: '-{{ .LOCKFILE_VERSION | default "base" }}'
      LOCKFILE: "{{ .REPO_ROOT }}/requirements/{{ .PLATFORM }}-{{ .CUDA_VERSION }}/requirements{{ .LOCKFILE_VERSION }}.lock"
    cmds:
      - uv pip sync {{ .LOCKFILE }} --index-strategy unsafe-first-match

  format:
    desc: Format the code
    cmds:
      - uv run yapf -i --recursive {{ .PYTHON_CODE_DIRS }}
      - uv run isort {{ .PYTHON_CODE_DIRS }}

  lint:
    desc: Lint the code
    vars:
      YAPF_FILES:
        sh: git ls-files | grep '.py$' | tr '\n' ' '
    cmds:
      - uv run isort --check-only {{ .PYTHON_CODE_DIRS }}
      - >
        if [ -n "{{ .YAPF_FILES }}" ]; then 
          uv run yapf --diff {{ .YAPF_FILES }}; 
        fi
      - uv run mypy {{ .PYTHON_CODE_DIRS }}
      - uv run pylint -v {{ .PYTHON_CODE_DIRS }}

  test:
    desc: Run tests
    vars:
      MARK: '{{ .MARK | default "" }}'
    cmds:
      - uv run pytest -v -m "{{ .MARK }}" --basetemp={{ .REPO_ROOT }}/.cache/pytest_tmp

  audit:
    desc: Run security audit
    vars:
      PYTHON_FILES:
        sh: find {{ .PYTHON_CODE_DIRS }} -type f -name "*.py" | tr '\n' ' '
    cmds:
      - uv run pip-audit
      - uv run bandit -c pyproject.toml -r {{ .PYTHON_FILES }}

  docker-build:
    desc: Build the docker image
    cmds:
      - DOCKER_DEFAULT_PLATFORM=linux/amd64 DOCKER_BUILDKIT=1 docker build -t thepackagename:latest .

  licenses:
    desc: List licenses of dependencies
    cmds:
      - uv run pip-licenses --from=mixed --order=license --summary
